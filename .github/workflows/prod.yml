name: ci/cd test
on:
  push:
    branches: ["main"]
env:
  NODE_VERSION: 16
jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Install NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Code Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: npm ci

      - name: Code Lint Check
        run: npm run lint

      - name: Code Test Check
        run: npm run test

      - name: Code Test Coverage Report
        run: npm run test:cov

      - name: Code Test Coverage Threshold Check
        run: |
          COVERAGE_THRESHOLD=30  # 원하는 임계값 설정
          ACTUAL_COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          if (( $(echo "$ACTUAL_COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "커버리지가 $COVERAGE_THRESHOLD% 미만입니다."
          exit 1
          fi

      - name: Generating coverage badges
        uses: jpb06/jest-badges-action@latest
        with:
          branches: main

      - name: Show last 5 commit messages
        run: git log -n 5 --oneline
        id: recent-commits
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create env file
        run: |
          touch .env
          cat << EOF >> .env
          ${{ secrets.PROD }}

      - name: AWS ECR 로그인
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 769733811145.dkr.ecr.ap-northeast-2.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazone ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazone ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: repository-nestjs
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "${{ secrets.PROD }}" > .env
          docker-compose -f docker-compose.yml build --no-cache
          docker tag hanghae_cicd_api:latest $ECR_REGISTRY/$ECR_REPOSITORY/hanghae_cicd_api:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/hanghae_cicd_api:latest


#          docker tag api:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG:api
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG:api
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"